%   S A P F O   -   Sense  APprehending  Frame  Operator   -    (c) Emil P·leö%                                                                     1988%                      (part 13 : DATABASE MANAGER)dd :- data_world(_,lexicon),retrieveb(dic,Kor,List),   write(Kor),nl,write(List),nl,nl,fail.pp :- data_world(_,lexicon),retrieveb(pzkmene,Pzkmen,List),   write(Pzkmen),nl,write(List),nl,nl,fail.delwin :- what_windows(X),X\==main,X\==debug,delete_window(X),fail.delwin :- !.e :- delwin,expdic.expdic :- cls,   ifthen(not(what_worlds(syntax)),create_world(syntax)),   ifthen(not(what_worlds(mind)),create_world(mind)),   ifthen(not(what_worlds(inference)),create_world(inference)),   define_window(sapfo,'SAPFO - Dictionary Expansion',(0,0),(24,79),(5,4)),   hide_window(W,sapfo),   repeat,cls,create_popup(choose,(9,24),(15,54),(4,4)),   nl,write(' Add New Root or Stem'),nl,write(' Add New Valency Frame Line'),   nl,write(' Change Root Categories'),   needle_paint(5,[1,9,2,9,3,13]),keyb(Y,_),name(X,[Y]),exit_popup,   case([X==v -> (ifthen(not(what_worlds(valency)),create_world(valency)),                  data_world(_,valency),[!nove_ramce!],data_world(_,main),fail),         X==r -> (ifthen(not(what_worlds(lexicon)),create_world(lexicon)),                  data_world(_,lexicon),		  define_window(root,'SAPFO - Dictionary Expansion',(0,0),(24,49),(5,4)),                  define_window(nest,'SlovotvornÈ hniezdo',(0,50),(24,79),(5,4)),		  hide_window(W2,nest),current_window(_,root),                  [!podkmene(1,left,nil,_,_)!],                  current_window(_,W2),delete_window(root),delete_window(nest),                  data_world(_,main),fail),       	 X==c -> (data_world(_,lexicon),repeat,nl,write(' Zmeniù koreÚ: '),                  input(K),ifthen(K\='',(                   retrieveb(dic,(K,N),kmen(Sd,Cat,KO,L)),write('     '),write(Sd),		   write('    '),write(Cat),write('     '),read(C2),                   C2\='',removeb(dic,(K,N),kmen(Sd,Cat,KO,L)),                   recordb(dic,(K,N),kmen(Sd,C2,KO,L)),fail)),                   data_world(_,main),!),	 X==m -> (data_world(_,lexicon),repeat,nl,write(' Odstr·niù kmeÚ: '),                  input(K),ifthen(K\=='',(                   retrieveb(dic,(K,N),kmen(Sd,Cat,KO,L)),nl,                   write(K),write(N),write('   '),write(Sd),                   write('     '),write(Cat),input(X1),X1\='',                   rem((K,N)),del(KO,(K,N)))))					                 |(!,true)]),   hide_window(sapfo,W),delete_window(sapfo).novkmen(_,right,1,_,_,_,_) :- !.novkmen(Lev,Sid,KOMP,KM,KO,Sd,Sd2) :-    opwin(Lev,Sid,KM,W),KM=(Km,N),   ifthen((nth_char(1,Km,X),X<91,X>64),akronym(Lev,Km)),   write(' Slovn˝ druh:        '),input(Sd),   ifthen(KOMP=0,KOO=KO),   newcat(Sd,Sd2,KM,KOO,CAT),nl,   ifthen(Sd==sl,(CAT=cat(_,_,_,_,_,_,Pk),recordb(pzkmene,Pk,pzkmen(KM,KOO)))),   ifthenelse(KOMP=0,KOO=KO,    (ifthen(Sid=left,nadkmen(KM,KO2)),     KOO=(KO,KO2))),   Lev1 is Lev+1,   podkmene(Lev1,Sid,KM,Sd,L),   ifthen(((KOMP=0;Sid=left),CAT\==cat(error)),recordb(dic,KM,kmen(Sd,CAT,KOO,L))),   current_window(W1,W),delete_window(W1).starkmen(Lev,Sid,KOMP,KM,KO) :-    opwin(Lev,Sid,KM,W),   retrieveb(dic,KM,kmen(Sd,CAT,KO,L)),   [!newcat(Sd,_,KM,KO,CAT)!],nl,Lev1 is Lev+1,   [!podkmene(Lev1,Sid,KM,Sd,L1)!],   ifthen(L1\==[],(append(L,L1,L2),removeb(dic,KM,kmen(Sd,CAT,KO,L)),              			   recordb(dic,KM,kmen(Sd,CAT,KO,L2))         )),   current_window(W1,W),delete_window(W1),   ifthen(L1=[],fail).podkmene(Lev,Sid,KO,Sd2,L) :- nl,   ifthenelse(KO==nil,write(' SlovotvornÈ hniezdo: '),write(' PodkmeÚ: ')),   input(Km1),   ifthenelse(Km1=='',L=[],    ( dehyphen(Km1,Km,KOMP),KM=(Km,N),      ifthen((KOMP=1,Sid=right),(KO=(_,N2),ctr_set(6,N2))),      ifthenelse(KOMP=0,KOO=KO,KOO=(KO,_)),      ((retrieveb(dic,KM,kmen(_,_,KOO,_)),starkmen(Lev,Sid,KOMP,KM,KOO),!,L=L1);       (order(KO,KM),novkmen(Lev,Sid,KOMP,KM,KO,_,Sd2),L=[KM|L1])      ),      ifthen(KO==nil,showl(KM)),      ifthenelse((Sid==right,KO=nil),L1=[],podkmene(Lev,Sid,KO,Sd2,L1))    )).nadkmen(KM1,KM2) :-   current_window(W,W),write(' NadkmeÚ: '),[!input(Km2)!],   KM2=(Km2,N2),KM1=(Km1,N1),   ((retrieveb(dic,KM2,kmen(Sd,CAT,KO,L)),     opwin(1,right,KO,W),opwin(2,right,KM2,W1),     [!newcat(Sd,_,KM2,KO,CAT),nl,write(' PodkmeÚ:  '),input(Km3)!],     current_window(W2,W),delete_window(W2),delete_window(W1),     ifthenelse(dehyphen(Km3,Km1,_),        (removeb(dic,KM2,kmen(Sd,CAT,KO,L)),         recordb(dic,KM2,kmen(Sd,CAT,KO,[KM1|L])),!),        fail));    (current_window(_,nest),cls,     podkmene(1,right,nil,_,_),ctr_is(6,N2),     current_window(_,W))   ).akronym(Lev,Km) :- U is Lev+2,R is U+2,C is U+60,   define_window(akro,'Akronym',(U,U),(R,C),(5,4)),current_window(W,akro),   ifthenelse(retrieveb(akronymy,Km,akron(S2)),true,     (input(S),concat(S,'.',S1),break(S1,S2))),   print(S2),current_window(_,W),delete_window(akro).dehyphen(K,K4,KOMP) :-   ifthenelse(string_search('-',K,Loc),     (string_length(K,L),Loc1 is Loc+1,L2 is L-Loc1,      substring(K,0,Loc,K1),substring(K,Loc1,L2,K2),      concat(K1,K2,K3),atom_string(K4,K3),KOMP=1),     (KOMP=0,K4=K)).newcat(sub,Sd2,KM,KO,cat(Se,Pf,Sf,Vz,Pc)) :-        write(' Semantick˝ prÌznak: '),inout(Se,nil),        write(' Vzor:               '),inout(Vz,nil),	ifthenelse((Se=osoba),Pc=poc,         (write(' PoËÌtateænosù:      '),inout(Pc,poc))),	KM=(Km1,_),	ifthenelse(Vz='ûena',concat(Km1,a,Km2),Km2=Km1),        afix(Sd2,sub,KO,(Km2,_),Pf,Sf),        wrtfix(Pf,Sf),!.newcat(adj,Sd2,KM,KO,cat(Val,Se,Pf,Sf,Vskl,Vstp)) :-	write(' Valencia:           '),inout(Val,uni),        write(' SÈmantick· trieda:  '),inout(Se,akvzt),        write(' SkloÚovacÌ vzor:    '),inout(Vskl,'pekn˝'),        ifthenelse((Se=kval;Se=akvzt),         (write(' StupÚovacÌ vzor:   '),inout(Vstp,'belas˝')),Vstp=nil),	afix(Sd2,adj,KO,KM,Pf,Sf),        wrtfix(Pf,Sf),!.newcat(adv,Sd2,KM,KO,cat(Se,Pf,Sf,Vz,Kn)) :-        write(' SÈmantick· trieda:  '),inout(Se,mds),KM=(Km,_),       write(' Koncovka pozitÌvu:  '),inout(Kn,''),        ifthenelse(Kn='',Vz=nil,        (write(' StupÚovacÌ vzor:    '),inout(Vz,'belas˝'))),       afix(Sd2,adv,KO,KM,Pf,Sf),       wrtfix(Pf,Sf),!.newcat(sl,_,_,_,X) :-         nonvar(X),!,X=cat(IT,Pf,Sf,Zv,Vd,Vz,Pk),        write(' PrÈzentn˝ kmeÚ:     '),write(Pk),nl,	write(' »asovacÌ vzor:      '),write(Vz),nl,        write(' Vid:                '),write(Vd),nl,        write(' Intencia:           '),write(IT),nl,        wrtfix(Pf,Sf),!.newcat(sl,Sd2,KM,KO,cat(IT,Pf,Sf,Zv,Vd,Vz,Pk)) :- 	KM=(Ik,_),        write(' NeurËitok:          '),input(Inf),        write(' 1 osoba sg :        '),input(Pz),        string_length(Inf,L1),string_length(Pz,L2),        N3 is L1-1,substring(Inf,N3,1,Zvr1),        concat(s,Zvr1,Zvr2),atom_string(Zvr,Zvr2),        ifthenelse(Zvr='sù',(Zv=nezv,substring(Inf,0,N3,Inf1),         N4 is L2-1,substring(Pz,0,N4,Pk1)),         (Zv=Zvr,L3 is L1-4,substring(Inf,0,L3,Inf1),         L4 is L2-4,substring(Pz,0,L4,Pk1))),        write(' Vid:                '),inout(Vd,nedok),        write(' IntenËn˝ r·mec:     '),input(IT1),int_text(IT,IT1),        decision(Inf1,Pk1,Vz,Ik,Pk),	afix(Sd2,sl,KO,(Inf1,_),Pf,Sf),        wrtfix(Pf,Sf),!.newcat(cast,Sd2,_,_,cat(Dr1,Dr2)) :-         write(' Druh:               '),inout(Dr1,nil),	write(' Druh:               '),inout(Dr2,nil),!.newcat(cit,Sd2,_,_,cat(Dr1,Dr2)) :-         write(' Druh:               '),inout(Dr1,nil),	write(' Druh:               '),inout(Dr2,nil),!.newcat(cis,Sd2,KM,KO,cat(Dr,Pf,Sf,Vz,Hod)) :-        write(' Druh:               '),inout(Dr,nil),        write(' Hodnota:            '),inout(Hod,nil),        write(' Vzor:               '),inout(Vz,nil),        wrtfix(Pf,Sf),!.newcat(_,_,_,_,cat(error)) :- write('error input').nove_ramce :-    repeat,current_window(_,sapfo),   nl,write(' »Ìslo r·mca:      '),[!input(CR1)!],   ifthenelse(CR1=='',!,     (write(' N·zov procesu:    '),int_text(CR,CR1),      ifthenelse(retrieveh(procesy,CR,Pcs),true,                 (read_line(1,Pcs),recordh(procesy,CR,Pcs))                ),cls,      concat([CR1,' ',Pcs],Nam1),atom_string(Nam,Nam1),      define_window(fram,Nam,(1,1),(23,39),(5,4)),      define_window(line,'Lines',(1,40),(23,78),(5,4)),      current_window(_,line),cls,nl,find(G,retrieveh(intencia,CR,G)),      current_window(_,fram),cls,[!riadky(CR)!],      delete_window(line),delete_window(fram),      fail)).riadky(Cr) :-  nl,write(' Predloûka:        '),input(Pr1),ifthenelse(Pr1='0',Pr=0,Pr=Pr1),   ifthen(Pr\=='',   (write(' Gramatick˝ p·d:   '),input(Pa1),gra(Pa1,Pa),    write(' SÈmantick· Ërta:  '),input(Se1),ifthenelse(Se1='',Se=uni,fea(Se1,Se)),    write(' SÈmantick˝ p·d:   '),input(Sp),    write(' äpecifik·cia:     '),input(No1),ifthenelse(No1='',No=0,int_text(No,No1)),    write(' FakultatÌvnosù:   '),input(Fl1),ifthenelse(Fl1='',Fl=0,int_text(Fl,Fl1)),    recordh(intencia,Cr,int1(Pr,Pa,Se,(Sp,No),Fl)),    current_window(_,line),tab(1),write(int(Pr,Pa,Se,(Sp,No),Fl)),nl,    current_window(_,fram),    !,riadky(Cr))).afix(_,_,_,_,_,_) :- !.afix(_,_,X,_,'','') :- var(X),!.afix(_,_,nil,_,nil,nil) :- !.afix(Sd1,Sd2,KO,KM,Pr,Su) :-    KO=(A1,_),KM=(B1,_),spell(A1,A2),spell(B1,B2),   prefix(Sd1,Sd2,PF),derivpf(A2,B2,PF,Pr),   sufix(Sd1,Sd2,SF),derivsf(A2,B2,SF,Su).derivpf([X,Y|_],B,PF,Fx) :- member(Fx,PF),spell(Fx,F1),cutbeg(F1,[X,Y|_],B),!.derivpf(_,_,_,'') :- !.derivsf(A,B,SF,Fx) :- reverse(A,A1),member(Fx,SF),spell(Fx,F1),   cutend(A0,F1,B),sufalt(A1,A2),reverse(A2,A3),   cutend(_,[X,Y],A0),cutend(_,[X,Y],A3),!.derivsf(_,_,_,'') :- !.sufalt(K,K).sufalt([A,X|L],[A,Y|L]) :- parsam(X,Y);parsam(Y,X);(X=a,Y=i);(X=o,Y=e);   (X=i,Y=a).sufalt([X|L],[Y|L]) :- parkon(X,Y);parkon(Y,X);member([X,Y],[[c,'Ë'],[c,k],   ['Ë',k],[k,c],[k,'Ë'],[k,t],[ch,'ö'],[h,'û'],['û',h],[g,'û'],[g,'Ë'],   ['dû',g],[d,dz],[c,t],[z,t]]).sufalt([A,B|L],[A|L]) :- B=o;B=e.sufalt([A|L],[A,B|L]) :- B=e;B=o;B=i.sufalt([n|L],L).sufalt([A,B|L],L) :- member([B,A],[[o,k],[c,k],[s,k],[o,v],[a,v],[a,t],   [u,m],[o,s],[i,k],[i,t],[iu,m]]).sufalt([A,B|L],[C,D|L]) :- member([B,A,D,C],[[s,k,'ö','ù'],[s,t,'ö','ù'],   [s,k,a,n],[e,c,e,n],[c,k,'Ë','ù']]).sufalt([A,B|L],[C|L]) :- member([B,A,C],[[s,k,'Ë'],[e,c,k],[s,k,'ö']]).sufalt([s,u,m,z,i|L],L).sufalt([k,s|L],[k,a,i|L]).sufalt([c,e|L],[k,e,'Ë'|L]).sufalt(L,[X|L]) :- X=n;X=e.prefix(sl,sl,[nad,na,za,zo,z,od,do,ob,o,vy,vz,vo,v,    podo,pod,po,predo,pred,pre,rozo,roz,so,s,u]) :- !.prefix(sl,sub,['˙']) :- !.prefix(sl,adj,[]) :- !.prefix(sub,sl,[o,za,u,pre]) :- !.prefix(sub,sub,['s˙',pod,pred,medzi,pol,polo,'veæ',nad,pra,pa,proti,ne]) :- !.prefix(sub,adj,[za,pred]) :- !.prefix(adj,sl,[za,zo,z,o,s,u,po]) :- !.prefix(adj,sub,[ne,polo,bez]) :- !.prefix(adj,adj,[pre,pri,pra,nad,na,polo]) :- !.sufix(sl,sl,[ink]) :- !.sufix(sl,sub,   ['aËka',ienka,enka,ka,ota,oba,ba,ina,nica,ca,'ovÚa','Úa',a,     iak,ak,'·k','nÌk','ËÌk','Ìk',ik,ok,'teæ','·Ë','Ë',ec,     'Èr',ant,an,'˙Ú','·reÚ','iareÚ','eÚ','oö',aj,ot,     dlo,ivo,nisko,ovisko,isko,'iöte',ie]) :- !.sufix(sl,adj,['teæn',biln,'aËn',n,liv,iv,'æav',av,ov,'Ëiv',iac,ac]) :- !.sufix(sub,sl,['Ëiù','iù','ovaù','kaù']) :- !.sufix(sub,sub,  [nica,ica,ca,ovina,ina,inka,ienka,enka,'iËka','ÙËka','oËka',ka,   'yÚa','aÚa','Úa','ovÚa',ista,ita,'in·','ovn·','ezn·',   'Ëok',ok,iak,ak,'·k','nÌk','ËÌk','Ìk',ik,'ÌËek','Ëek',tek,   aË,iË,'·Ë','·reÚ','iareÚ','eÚ','Ëan',an,'Ìn',inec,ec,'eæ',iar,ar,'·r','Èr',   nisko,ovisko,isko,inko,enko,sko,'ieËko','eËko','oËko','ÌËko',ko,   'aù','eù','nosù','ovosù','iz·cia',izmus,stvo,ie,ce,ant,'oö']) :- !.sufix(sub,adj,  [ovit,it,nat,at,ist,ast,'·nsk',iansk,ansk,ensk,insk,ovsk,atick,ick,sk,ck,k,   ac,'·ln',ovan,en,n,'Úajö','ajö',ov,in]) :- !.sufix(adj,sl,['ovaù','iù','ieù','n˙ù','˙ù']) :- !.sufix(adj,sub,   [ica,ka,ota,oba,'uöa',ucha,'uæa',ovina,'Ëina',ina,ava,a,    ak,'·k',iak,'nÌk',inec,an,'·Ú','oÚ','·Ë','·ö','·æ',och,    'osù',stvo,ctvo,tvo,izmus]) :- !.sufix(adj,adj,   ['·nsk',ulink,link,'uök','uËk','uËiËk','ËiËk','iËk','uæk',unk,    izn,ast,ist]) :- !.sufix(adv,adj,['Úajö','ajö']) :- !.rem(KO) :- removeb(dic,KO,kmen(Sd,C,_,L)),   ifthen(Sd=sl,(C=cat(_,_,_,_,_,_,Pk),removeb(pzkmene,Pk,pzkmen(KO,_)))),   member(KM,L),rem(KM),fail.rem(_) :- !.del(KO,KM) :- removeb(dic,KO,kmen(Sd,Cat,K,L)),delis(KM,L,L1),   recordb(dic,KO,kmen(Sd,Cat,K,L1)).delis(K,[K|L],L) :- !.delis(K,[A|B],[A|C]) :- delis(K,B,C),!.wrtfix(Pf,Sf) :- nl,   write(' DerivaËn˝ prefix:   '),inout(Pf,''),   write(' DerivaËn˝  sufix:   '),inout(Sf,'').opwin(1,right,nil,W) :- !,   define_window(z,'nil',(1,41),(18,75),(5,4)),current_window(W,z).opwin(Lev,Sid,(Km,N),W) :-   ifthenelse(Sid=left,(Na is 96+Lev,C1 is Lev),(Na is 106+Lev,C1 is Lev+40)),   R is Lev+17,C is C1+34,   name(Nam,[Na]),int_text(N,N1),concat([Km,' ',N1],Km1),atom_string(Km2,Km1),   define_window(Nam,Km2,(Lev,C1),(R,C),(5,4)),current_window(W,Nam),cls,nl.needle_paint(_,[]) :- tmove(0,0),!.needle_paint(Col,[X,Y|L]) :- tmove(X,Y),wa(1,Col),needle_paint(Col,L).find(G,T) :- call(T),write(' '),write(G),[!ctr_inc(1,_)!],nl,fail.find(_,_) :- !.order(KO,(Km,_)) :- ctr_set(5,0),ifthen(KO=(Km,M),ctr_set(5,M)),   retrieveb(dic,(Km,N),_),ctr_is(5,X),ifthen(N>X,ctr_set(5,N)),fail.order(_,(Km,N)) :- ctr_inc(5,_),ctr_is(5,N),!.showk(K) :- data_world(W,lexicon),retrieveb(dic,(K,N),kmen(_,_,nil,_)),   nl,show_nest(1,(K,N),full,0),nl,fail,data_world(_,W).showk(_) :- !.showl(KM) :- current_window(W,nest),cls,nl,show_nest(1,KM,half,0),               current_window(nest,W).show_nest(H,KM,Mode,Dnt) :-    T is Dnt*3+1,tab(H,T),Dnt1 is Dnt+1,   retrieveb(dic,KM,kmen(Sd,Cat,KO,L)),ctr_inc(2,_),   ifthenelse(Mode==pretty,zakltvar(Sd,KM,KM1),KM1=KM),   write(H,KM1),write(H,'             '),   ifthen(Mode==full,write(H,Cat)),   ifthen(Mode==total,(write(H,kmen(Sd,Cat,KO,list)),nl(H),write(H,L))),   ifthen(Mode==pretty,(write(H,Sd),write(H,'   '),write(H,Cat))),   nl(H),member(KR,L),show_nest(H,KR,Mode,Dnt1),fail.show_nest(_,_,_,_) :- !.showlex :- showlex(full).showlex(Mode) :- showlex(1,Mode).showlex(H,Mode) :- nl(H),ctr_set(1,0),ctr_set(2,0),data_world(_,lexicon),   retrieveb(dic,KM,kmen(_,_,nil,_)),ctr_inc(1,_),nl(H),   show_nest(H,KM,Mode,0),fail.showlex(H,Mode) :- !,ctr_is(1,X),ctr_is(2,Y),nl(H),   write(H,' SlovnÌk obsahuje '),write(H,Y),write(H,' kmeÚov v '),write(H,X),   write(H,' slovotvorn˝ch hniezdach.').printlex :- open(H,prn,w),nl(H),   write(H,'S A P F O   -   Sense APprehending Frame Operator  -  (C) Emil P·leö 1991'),   nl(H),nl(H),write(H,'                  (part 15: NESTED DICTIONARY)'),   nl(H),nl(H),   [-genmorfo],[-angenfon],showlex(H,full),nl(H),close(H).showint :- open(H,prn,w),nl(H),   write(H,'S A P F O   -   Sense APprehending Frame Operator   -   (C) Emil P·leö 1991'),   nl(H),nl(H),write(H,'                    (part 16: VALENCY FRAMES)'),   nl(H),nl(H),   nl(H),nl(H),data_world(_,valency),   ctr_set(3,0),ctr_set(4,0),ctr_set(7,0),repeat,ctr_inc(7,X),   ifthen(X<1000,(    [!retrieveh(procesy,X,Pcs)!],write(H,X),write(H,'   '),ctr_inc(4,_),    write(H,Pcs),write(H,' proces'),nl(H),nl(H),    showint1(H,X),nl(H),fail)),   nl(H),nl(H),write(H,'ValenËn˝ slovnÌk obsahuje  '),ctr_is(3,L),write(H,L),   write(H,' riadkov v '),ctr_is(4,R),write(H,R),write(H,' r·mcoch.').showint1(H,X) :- retrieveh(intencia,X,Line),write(H,Line),nl(H),ctr_inc(3,_),   fail.showint1(_,_) :- !.lexsave :- create(_,'lexicon.lex'),open(H,'lexicon.lex',w),lexsave(H),close(H).lexsave(H) :- retrieveb(dic,KM,kmen(Sd,Cat,KO,L)),onetwo(L,L1,L2),   writeq(H,kmen(KM,KO,Sd,Cat)),nwl(H),   writeq(H,list(L1)),nwl(H),writeq(H,list(L2)),nwl(H),   fail.lexsave(H) :- write(H,eof),nwl(H),   retrieveb(pzkmene,Pk,pzkmen(KM,KO)),writeq(H,pzkmen(Pk,KM,KO)),nwl(H),   fail.lexsave(H) :- write(H,eof),nwl(H),!.intsave :- create(_,'intencia.lex'),open(H,'intencia.lex',w),   intsave(H),close(H).intsave(H) :- data_world(_,valency),   retrieveh(intencia,Cr,int1(Pr,Pa,Se,SP,Fl)),   writeq(H,int(Cr,Pr,Pa,Se,SP,Fl)),nwl(H),fail.intsave(H) :- write(H,eof),nwl(H),data_world(_,valency),   retrieveh(procesy,Cr,Pcs),atom_string(Pcs1,Pcs),   writeq(H,pro(Cr,Pcs1)),nwl(H),fail.intsave(H) :- write(H,eof),nwl(H),!.zakltvar(sub,K1,K2) :- !,gent(subst(_,_,nom,sg),_,ano,K1,[K2|S],S).zakltvar(adj,K1,K2) :- !,gent(adjekt(muz,ziv,nom,sg,poz),_,ano,K1,[K2|S],S).zakltvar(sl,K1,K2) :- !,gent(infin,_,ano,K1,[K2|S],S).zakltvar(adv,K1,K2) :- !,gent(adverb(poz),_,ano,K1,[K2|S],S).zakltvar(_,K,K).nwl(H) :- put(H,46),put(H,13).onetwo([],[],[]) :- !.onetwo([A,B|L],[A|L1],[B|L2]) :- onetwo(L,L1,L2),!.onetwo([A],[A],[]) :- !.member2(A,B,[A,B]) :- !.member2(A,B,[X,Y|L]) :- (X=A,Y=B);member2(A,B,L).endstring(S,Ee) :- atom_string(Ee,E),string_length(S,Ls),string_length(E,Le),    Lz is Ls-Le,substring(S,Lz,Le,E).dekomp(Z,Tv,Km,Knc) :- string_length(Tv,L2),member(Knc,Z),    string_length(Knc,L1),L3 is L2-L1,atom_string(Knc,Knc1),    substring(Tv,L3,L1,Knc1),L4 is L2-L1,substring(Tv,0,L4,Tv1),    atom_string(Km,Tv1).input(X) :- read_line(1,S),atom_string(X,S),!.inout(X,Deflt) :- ifthenelse(nonvar(X),(write(X),nl),    (input(Y),ifthenelse(Y='',ifthenelse(Deflt=nil,fail,X=Deflt),X=Y))).print([]) :- !.print([X|L]) :- write(' '),write(X),print(L).spell($$,[]) :- !.spell(X,[S|Z1]) :- string_length(X,L),nth_char(0,X,A1),name(A,[A1]),    ifthenelse(L>1,nth_char(1,X,B1),B1=65),name(B,[B1]),    ((  ((A=d,B='û');(A=d,B=z);(A=c,B=h);(A=i,(B=a;B=e;B=u))),    !,N=2,concat(A,B,S1),atom_string(S,S1));(N=1,S=A)),    L1 is L-N,substring(X,N,L1,Y),spell(Y,Z1).append([],L,L) :- !.append([H|T],L,[H|T1]) :- append(T,L,T1),!.cutbeg([],L,L) :- !.cutbeg([X|A],B,[X|C]) :- cutbeg(A,B,C),!.cutend([],L,L) :- !.cutend([A|B],C,[A|D]) :- cutend(B,C,D),!.reverse([],[]) :- !.reverse([H|T],Z) :- reverse(T,T1),append(T1,[H],Z),!.member(_,[]) :- fail.member(X,[H|T]) :- X=H;member(X,T).decision(I,P,Vz,Ik,Pk) :-    ((endstring(P,'·'),Vz='chytaù');    (endstring(P,ia),Vz='klaÚaù');    (endstring(P,a),Vz='ËÌtaù');    (endstring(P,i),ifthenelse(kongrup(P),Vz='kr·öliù',Vz='k˙più'));    (endstring(P,'Ì'),         ((endstring(I,i),ifthenelse(kongrup(P),Vz='kresliù',Vz='robiù'));          (endstring(I,ie),Vz='vidieù');          (endstring(I,a),Vz='kriËaù')));    (endstring(P,ie),         ((endstring(I,a),!,Vz='braù');          (endstring(I,'˙'),!,Vz='hyn˙ù');          (endstring(I,ie),!,            ifthenelse(endstring(I,rie),Vz='trieù',Vz='rozumieù'));          (altviest(K1,K2),endstring(I,K1),endstring(P,K2),!,Vz='viesù');          (Vz='niesù')));    (endstring(P,je),!,          ((endstring(I,ova),!,Vz='pracovaù');             ((endstring(I,ia);endstring(I,ie)),!,Vz='kliaù');           ((endstring(I,a);endstring(I,u)),Vz='ûuù');           ((endstring(I,i);endstring(I,y)),Vz='più')));    (endstring(P,e),          ((endstring(I,'˙'),Vz='chudn˙ù');           (endstring(I,u),Vz='vl·dnuù');           (endstring(I,'p‰'),!,Vz='p‰ù');           (endstring(I,'ûa'),!,Vz='ûaù');           (endstring(I,'ja'),!,Vz='jaù');               (endstring(I,a),Vz='Ëesaù')))   ),                             vzorsl(Vz,X,_,_,_,Y,_,_),endstring(I,X),endstring(P,Y),   string_length(I,L),string_length(X,L1),L2 is L-L1,substring(I,0,L2,I1),   string_length(P,N),string_length(Y,N1),N2 is N-N1,substring(P,0,N2,P1),   atom_string(Ik,I1),atom_string(Pk,P1).altviest(s,die).altviest(s,tie).altviest(c,kie).altviest(c,hie).altviest(z,hie).            vzorsl('chytaù',a,a,av,an,'·',aj,'aj˙').vzorsl('klaÚaù',a,a,av,an,ia,aj,'aj˙').vzorsl('ËÌtaù',a,a,av,an,a,aj,'aj˙').vzorsl('rozumieù',ie,e,ev,en,ie,ej,'ej˙').vzorsl('niesù','',o,'',en,ie,'','˙').vzorsl('viesù','',o,'',en,ie,'','˙').vzorsl('hyn˙ù','˙',u,uv,ut,ie,'','˙').vzorsl('pracovaù',a,a,av,an,e,'','˙').vzorsl('robiù',i,i,iv,en,'Ì','',ia).vzorsl('k˙più',i,i,iv,en,i,'',ia).vzorsl('vidieù',ie,e,iv,en,'Ì','',ia).vzorsl('kriËaù',a,a,av,an,'Ì','',ia).vzorsl('trieù',ie,e,ev,et,ie,i,'˙').vzorsl('braù',a,a,av,an,ie,'','˙').vzorsl('Ëesaù',a,a,av,an,e,'','˙').vzorsl('chudn˙ù','˙',o,uv,ut,e,i,'˙').vzorsl('vl·dnuù',u,o,uv,ut,e,i,u).vzorsl('ûuù','','',v,t,e,'','˙').vzorsl('kliaù','','',v,t,e,'','˙').vzorsl('più','','',v,t,e,'','˙').vzorsl('ûaù',a,a,av,at,e,i,'˙').vzorsl('p‰ù','‰','‰','‰v','‰ù',e,i,'˙').vzorsl('kresliù',i,i,iv,en,'Ì',i,ia).vzorsl('kr·öliù',i,i,iv,en,i,i,ia).kongrup(P) :- spell(P,P1),reverse(P1,[_,A,B|_]),konson(A),konson(B).dlhaslab(X) :-dlhasam(Y),string_search(Y,X,_).kratkaslab(X) :- not(dlhaslab(X)).samohl(X) :-kratkasam(X);dlhasam(X).konson(X) :- tvrda(X);makka(X);obojaka(X).dlhasam(X) :- parsam(_,X);X=iu.kratkasam(X) :- parsam(X,_).tvrda(X) :- tvrdekons(Z),member(X,Z).makka(X) :- makkekons(Z),member(X,Z).obojaka(X) :- obojake(Z),member(X,Z).diftong(X) :- diftongy(Z),member(X,Z).tvrdekons([h,ch,k,g,d,t,n,l]).makkekons([c,'Ë',dz,'dû',f,j,'ö','û','ù','Ô','Ú','æ']).obojake([v,m,r,b,p,s,f,z]).diftongy([ia,ie,iu,'Ù']).parsam(a,'·').parsam(a,ia).parsam(e,ie).parsam(o,'Ù').parsam(y,'˝').parsam(i,'Ì').parsam(u,'˙').parsam(r,'‡').parsam(l,'Â').parkon(l,'æ').parkon(d,'Ô').parkon(t,'ù').parkon(n,'Ú').parson(b,p).parson(d,t).parson(g,k).parson(z,s).parson(v,f).parson('û','ö').parson('Ô','ù').parson('dû','Ë').parson(dz,c).clarify:- ctr_set(1,0),   current_predicate(K),K\='clarify/0',abolish(K),ctr_inc(1,N),N=61.clarify :- expunge,!.gra(n,nom).gra(g,gen).gra(d,dat).gra(a,ak).gra(l,lok).gra(i,ins).fea(z,ziv) :- !.fea(k,kon) :- !.fea(l,lok) :- !.fea(i,instr) :- !.fea(a,abs) :- !.fea(m,mat) :- !.fea(c,ciel) :- !.fea(s,sil) :- !.fea(ko,korp) :- !.fea(p,prir) :- !.fea(j,jedn) :- !.fea(mo,mov) :- !.fea(nz,nez) :- !.fea(nm,nemov) :- !.fea(nc,neciel) :- !.fea(F,F).