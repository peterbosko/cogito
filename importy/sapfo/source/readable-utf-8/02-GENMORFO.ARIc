%   S A P F O   -   Sense  APprehending  Frame  Operator   -    (c) Emil P·leö%                                                                     1988%                    (part 2 : MORPHOLOGY, GENERATION):- segment(segmor).:- public an/6,gent/6,dekomp/4,append/3,member/2:far.:- extrn osozak/7,oskm/4,osopri/7,zvrat/3,opyt/3,opyt/2,ukaz/3,ukaz/5,        pronname/2,prefpron/2,neur/2,exc/6,byt/5,        conj1/5,conj2/6,prep1/5,prep2/6,prep3/4,vzorsub/3,vzorsl/8,alt/2,        koncad/6,koncsb/4,kcindik/3,kclpar/3,kcimper/3,subkonc/1,adjkonc/1,        parsam/2,parkon/2,parson/2,dlhaslab/1,kratkaslab/1,samohl/1,        konson/1,dlhasam/1,kratkasam/1,tvrda/1,makka/1,obojaka/1,diftong/1,        paint/2,casecat/2:far.gent(GCAT,SCAT,Ne,Ko,X,S) :-   (GCAT=prepoz(_,_);GCAT=conj;GCAT=partik;GCAT=interj),   an(GCAT,SCAT,Ne,Ko,X,S).gent(aux(Os,Cs,prez,_),_,nie,byt,[nie,T|_],_) :-   byt(Os,Cs,prez,_,T),!.gent(aux(Os,Cs,Cas,Ro),_,Ne,byt,[T|S],S) :-   byt(Os,Cs,Cas,Ro,T1),negativ(T1,T,Ne).gent(aux(Os,Cs,min,Ro),_,Ne,byvat,[X|S],S) :-   kclpar(Ro,Cs,Kn),concat('b˝va',Kn,K1),negativ(K1,X,Ne).gent(subst(Ro,Zi,Pa,Ci),sem(Sem,Poc),Ne,KM,[X|S],S) :-    cdx,radix(KM,_,sub,cat(Sem,Prf,Suf,Vz,Poc)),cdm,    ifthen(Poc==pomn,Ci=pl),ifthen(Poc==hrom,Ci=sg),    KM=(K,_),spell(K,K0),    ifthenelse(Ne=nie,K1=[n,e|K0],K1=K0),    reverse(K1,K2),    koncsb(Vz,Ci,Pa,Su),    alt(Vz,Altyp),altern(Altyp,Pa,Ci,K2,K3),    lingdorz2(Su,K3,K4),condense(Su,K4,X),    vzorsub(Vz,Ro,_),    ifthenelse((Sem=[osoba|_];Sem=[zviera|_]),Zi=ziv,Zi=nez).gent(adjekt(Ro,Zi,Pa,Ci,St),sem(Val,Sem),Ne,KM,[X|S],S) :-    cdx,radix(KM,_,adj,cat(Val,Sem,Prf,Suf,Vzskl,Vzstp)),cdm,KM=(K,_),    kompar(St,Ne,Ro,Zi,Pa,Ci,Vzskl,Vzstp,K,X).gent(adverb(St),sem(Se),Ne,KM,[X|S],S) :-    cdx,radix(KM,_,adv,cat(Sem,Prf,Suf,Vzstp,Kn)),cdm,KM=(K,_),    ifthenelse(St=poz,(concat(K,Kn,K1),atom_string(X,K1)),                       kompar(St,Ne,str,nez,nom,sg,Kn,Vstp,K,X)).gent(indikat(3,pl,Cas),sem(Int,Rex,Vid),Neg,KM,[X|S],S) :-    cdx,radix(KM,_,sl,cat(Int,Prf,Suf,Rex,Vid,Vz,Pk)),cdm,    ifthen(deagent(Int),fail),    (Vz='chytaù';Vz='rozumieù';Vz='niesù';Vz='hyn˙ù'),!,    vzorsl(Vz,_,_,_,_,_,N1,_),concat([Pk,N1,'˙'],K1),negativ(K1,X,Neg),    ifthenelse(Vid=dok,Cas=fut,Cas=prez).gent(indikat(Os,Cis,Cas),sem(Int,Rex,Vid),Neg,KM,[X|S],S) :-    cdx,radix(KM,_,sl,cat(Int,Prf,Suf,Rex,Vid,Vz,Pk)),cdm,    ifthen(deagent(Int),(Os=3,Cis=sg)),    vzorsl(Vz,_,_,_,_,N1,_,_),kcindik(Os,Cis,N2),    concat([Pk,N1,N2],K1),negativ(K1,X,Neg),    ifthenelse(Vid=dok,Cas=fut,Cas=prez).gent(imper(Os,Cis),sem(Int,Rex,Vid),Neg,KM,[X|S],S) :-    cdx,radix(KM,_,sl,cat(Int,Prf,Suf,Rex,Vid,Vz,Pk)),cdm,    ifthen(deagent(Int),(Os=3,Cis=sg)),    vzorsl(Vz,_,_,_,_,Ni,N1,_),kcimper(Os,Cis,N2),    concat(N1,N2,N3),dorzling2(Ni,N3,Pk,Pk1),    concat(Pk1,N3,K1),negativ(K1,X,Neg).gent(lpar(Ro,Ci),sem(In,Rx,Vd),Ne,KM,[X|S],S) :-    cdx,radix(KM,_,sl,cat(Int,Prf,Suf,Rex,Vid,Vz,Pk)),cdm,    KM=(Ik,_),slalt(Vz,Ik,K1),ifthen(deagent(In),(Ro=str,Ci=sg)),    kclpar(Ro,Ci,Kn2),    ifthenelse(     ((Vz\=='chudn˙ù',Vz\=='vl·dnuù',Vz\=='niesù',Vz\=='viesù');(Ro==muz,Ci==sg)),     vzorsl(Vz,_,Kn1,_,_,_,_,_),Kn1=''),    concat([K1,Kn1,Kn2],K2),negativ(K2,X,Ne).gent(tpar(Rod,Ziv,Pad,Cis,Stp),sem(Int,Rex,Vid),Neg,KM,[X|S],S) :-    cdx,radix(KM,_,sl,cat(Int,Prf,Suf,Rex,Vid,Vz,Pk)),cdm,KM=(Ik,_),    tranzit(Int),vzorsl(Vz,_,_,_,N1,_,_,_),concat(Ik,N1,K1),    ifthenelse(Vz=='kliaù',Vz2='kr·sny',Vz2='pekn˝'),    kompar(Stp,Neg,Rod,Ziv,Pad,Cis,Vz2,'belas˝',K1,X),Se2=Int.gent(cpar(Rod,Ziv,Pad,Cis,prez),SemCat,Neg,KM,[X|S],S) :-    gent(tranz,SemCat,Neg,KM,[K1|S],S),SemCat\=sem(_,_,dok),    koncad('r˝dzi',Rod,Ziv,Pad,Cis,N1),concat(K1,N1,K2),negativ(K2,X,Neg).gent(cpar(Rod,Ziv,Pad,Cis,min),sem(Int,Rex,Vid),Neg,KM,[X|S],S) :-    cdx,radix(KM,_,sl,cat(Int,Prf,Suf,Rex,Vid,Vz,Pk)),cdm,KM=(Ik,_),    Vid\==nedok,vzorsl(Vz,_,_,N1,_,_,_,_),koncad('cudzÌ',Rod,Ziv,Pad,Cis,N2),    concat([Ik,N1,'ö',N2],K1),negativ(K1,X,Neg).gent(tranz,sem(Int,Rex,Vid),Neg,KM,[X|S],S) :-    cdx,radix(KM,_,sl,cat(Int,Prf,Suf,Rex,Vid,Vz,Pk)),cdm,    vzorsl(Vz,_,_,_,_,_,_,N1),concat([Pk,N1,c],K1),    negativ(K1,X,Neg).gent(gerund(Pad,Cis),SemCat,Neg,KM,[X|S],S) :-    gent(tpar(muz,ziv,nom,sg,poz),SemCat,Neg,KM,[X1|_],_),    dekomp([y,'˝'],X1,X2,_),koncsb('vysvedËenie',Cis,Pad,N1),    concat(X2,N1,X3),negativ(X3,X,Neg).gent(infin,sem(Int,Rex,Vid),Neg,KM,[X|S],S) :-    cdx,radix(KM,_,sl,cat(Int,Prf,Suf,Rex,Vid,Vz,Pk)),cdm,KM=(Km,_),    vzorsl(Vz,N1,_,_,_,_,_,_),concat([Km,N1,'ù'],K1),    negativ(K1,X,Neg).gent(subpron(Os,Cs,Ro,Zi,Pa),sem(Dr,Urc,Dor,_),ano,ja,[X|S],S) :-    (Dr=osozak,osozak(X,Os,Cs,Ro,Zi,Pa,Dor));    (Dr=zvrat,zvrat(X,Pa,Dor));    (Dr=ukaz,ukaz(X1,Ro,Zi,Pa,Cs),     ifthenelse(Dor=dor,(Kn=to;Kn='ûe';Kn='hæa'),Kn=''),     concat(X1,Kn,X2),atom_string(X,X2)).gent(GCAT,sem(opyt,Urc,Dor,SP),ano,Ko,[X|S],S) :-    ((GCAT=subpron(_,_,_,Zi,Pa),      ifthenelse(Ko=kto,Zi=ziv,Zi=nez),opyt(K1,Pa,Zi),SP=subj);     (GCAT=cirpron,SP=(Sp,_),opyt(K1,Sp))),    (prefpron(Pr,Urc);(Urc=lub,Pr='',Kn='koævek')),    ifthen(var(Kn),ifthenelse(Dor=dor,Kn='ûe',Kn='')),    concat([Pr,K1,Kn],K2),atom_string(X,K2).gent(adjpron(Os,Cs,Ro,Zi,Pa),sem(Dr,_,Dor,_),ano,'mÙj',[X|S],S) :-    (Dr=osopri,osopri(X,Os,Cs,Ro,Zi,Pa,Dor));    (koncad('mÙj',Ro,Zi,Pa,Cs,Kn),     ((Dr=osopri,       ifthenelse((Kn='';Kn=ho;Kn=mu),oskm(dl,Os,Cs,K1),oskm(kr,Os,Cs,K1)));      (Dr=zvrat,K1=svoj)),     concat(K1,Kn,K2),atom_string(X,K2)).gent(adjpron(_,Ci,Ro,Zi,Pa),sem(opyt,Urc,Vzd,Dor,SP),ano,'k˝',[X|S],S) :-    case([SP=det -> (ifthenelse(Dr=opyt,(Km=ak;Km=ktor),(Km=tak;Km=onak));                     (Urc=neu,(Km='voæajak';Km=nejak),Pr='');                     (Urc=lub,Km='vöelijak',Pr='')),          SP=pos -> Km='Ë',          SP=ord -> (((Dr=opyt,Km='koæk');(Dr=ukaz,Km='toæk')),Ci=sg),          SP=kar -> (((Dr=opyt,Km='koæk');(Dr=ukaz,Km='toæk')),Ci=pl),	  SP=spe -> ((Dr=opyt,Km='koækorak');(Dr=ukaz,Km='toækorak'))]),    ifthenelse(Km='Ë',Vz='cudzÌ',Vz='pekn˝'),    koncad(Vz,Ro,Zi,Pa,Ci,Kn),    (ifthenelse(Dor=dor,Kn2='ûe',Kn2='');(Urc=lub,Kn2='koævek',Pr='')),    prefpron(Pr,Urc),    concat([Pr,Km,Kn,Kn2],X1),atom_string(X,X1).kompar(St,Ne,Ro,Zi,Pa,Ci,Vskl,Vstp,K,X) :-    spell(K,K1),reverse(K1,K2),    ifthenelse(Ne=nie,append(K2,[e,n],K3),K3=K2),    ifthenelse(St=poz,K5=K3,(K5=['ö'|K4],dkpar(Vstp,K4,K3))),    ifthenelse(St=sup,append(K5,[j,a,n],K6),K6=K5),    ifthenelse(St=poz,koncad(Vskl,Ro,Zi,Pa,Ci,Su),                      koncad('cudzÌ',Ro,Zi,Pa,Ci,Su)),    condense(Su,K6,X).dorzling2(Kz,Kn,K1,K4) :-     nth_char(0,Kz,X),name(Y,[X]),(Y=i;Y=e;Y='Ì';Y='È'),    (Kn=$$;Kn='';(nth_char(0,Kn,Z),name(W,[Z]),W\=i,W\=e,W\='Ì',W\='È')),    dekomp([d,t,n,l],K1,K2,T),parkon(T,T1),    concat(K2,T1,K3),atom_string(K4,K3),!.dorzling2(_,_,K,K) :- !.lingdorz2(K,[A|B],[C|B]) :-     parkon(C,A),spell(K,[X|_]),(X=i;X=e;X=ia;X=ie;X=iu;X='Ì';X='È'),!.lingdorz2(_,A,A).altern(A,nom,sg,L,L) :- (A='dievËa';A=vokdel1;A=vokdel14;A=vokcont1;   A=vokcont14;A=hume;A=demeter;A=vietor;A=paris;A=aias;A=noe;A=juno;   A='anakreÛn';A=pontifex;A=kura;A='maù'),!.altern(A,ak,sg,L,L) :- (A='dievËa';A=kura;Avokdel14;A=vokcont14;   A=vietor,A='maù'),!.altern(Vokins,gen,pl,[A|L],[A,B|L]) :-    substring(Vokins,0,6,$vokins$),spell(Vokins,Z1),reverse(Z1,[B|_]),!.altern(Alt,_,_,[A,B|L],[A|L]) :- (Alt=vokdel1;Alt=vokdel14),!.altern(Alt,_,_,[A,B|L],[A,C|L]) :- (Alt=vokcont1;Alt=vokcont14),parsam(C,B),!.altern(Alt,_,_,[A,B,C|L],[A,B,D|L]) :- (Alt=vokcont1;Alt=vokcont14),parsam(D,C),!.altern(voklong2,gen,pl,[A,B|L],[A,C|L]) :- parsam(B,C),!.altern(voklong2,gen,pl,[A,B,C|L],[A,B,D|L]) :- parsam(C,D),!.altern('voklong2·',gen,pl,[A,a|L],[A,'·'|L]) :- !.altern('voklong2·',gen,pl,[A,B,a|L],[A,B,'·'|L]) :- !.altern(vokcont2,gen,pl,[A,B|L],[A,C|L]) :- parsam(C,B),!.altern('vodnÌk',nom,pl,[k|L],[c|L]) :- !.altern('Ëernoch',nom,pl,[ch|L],[s|L]) :- !.altern(turek,Pa,Ci,K1,K3) :-    altern(vokdel1,Pa,Ci,K1,K2),altern('vodnÌk',Pa,Ci,K2,K3),!.altern(A,nom,sg,L,[s,u|L]) :- (A=rytmus;A='gÈnius';A='nÛnius'),!.altern(syzifos,nom,sg,L,[s,o|L]) :- !.altern(achilles,nom,sg,L,[s,e|L]) :- !.altern(anaxagoras,nom,sg,L,[s,a|L]) :- !.altern(A,ak,sg,L,[s,u|L]) :- (A=rytmus;A='nÛnius'),!.altern(A,_,_,L,L) :- (A='gÈnius';A=achilles;A=syzifos;A=anaxagoras;   A=rytmus;A='nÛnius';A='m˙zeum'),!.altern(paris,_,_,[s|L],[d|L]) :- !.altern(aias,_,_,[s|L],[t,n|L]) :- !.altern(noe,_,_,L,[m|L]) :- !.altern('anakreÛn',_,_,[n,'Û'|L],[t,n,o|L]) :- !.altern(pontifex,_,_,[x,e|L],[k,i|L]) :- !.altern(juno,_,_,[o|L],[n,'Û'|L]) :- !.altern(hume,_,_,[e|L],L) :- !.altern(vietor,_,_,[A,B,C,D|L],[A,C,E|L]) :- parsam(E,D),!.altern(demeter,gen,pl,K1,K2) :- altern(voklong2,gen,pl,K1,K2),!.altern(demeter,Pa,Ci,K1,K2) :- altern(vokdel1,Pa,Ci,K1,K2),!.altern('maù',_,_,L,[r,e|L]) :- !.altern('dievËa',Pa,sg,L,['ù',a|L]) :- (Pa=gen;Pa=dat;Pa=ins),!.altern('dievËa',_,_,L,[t,a|L]) :- !.altern(kura,_,pl,L,[c,n,e|L]) :- !.altern(kura,Pa,Ci,K1,K2) :- altern('dievËa',Pa,Ci,K1,K2),!.altern('maËa',Pa,Ci,K1,K3) :-    altern('dievËa',Pa,Ci,K1,K2),altern(voklong2,Pa,Ci,K2,K3),!.altern('teæa',_,pl,L,[c|L]) :- !.altern(_,_,_,L,L) :- !.   