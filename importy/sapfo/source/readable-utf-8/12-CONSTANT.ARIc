%    S A P F O   -   Sense  APprehending  Frame  Operator   -    (c) Emil Páleš%                                                                     1988%                       (part 12: CONSTANT  MODULE):- public main/0,restart/0,paint/2.:- extrn veta/5,fraza/4,an/6,gent/6,questans/2,p/1,     trace/0,cdm/0,addfar/0,farfield/1,show_tree/1,clock/3,member/2:far.i :- introduce.dx :- cdx,trace.di :- cdi,trace.cdx :- code_world(_,syntax),data_world(_,valency).cdi :- code_world(_,inference),data_world(_,mind).p(Kb,V) :- cdx,   ifthen(Kb==l,open(H,prn,w)),   ifthen(Kb==f,open(H,'diana.txt',a)),   ifthen((Kb==l;Kb==f),(    print(H,(V,[])),    ifthen((Kb==l;Kb==f),      (write(H,'______________________________________________________________________'),       nl(H),close(H)))   )),   p(Kb),   ifthen(Kb==l,open(H,prn,w)),ifthen(Kb==f,open(H,'diana.txt',a)),   ifthen((Kb==l;Kb=f),(nl(H),nl(H),nl(H),nl(H),close(H))),   cdm.v :- cdx,v,cdm.q :- cdi,q,cdm.main :- ifthen(not(what_worlds(syntax)),create_world(syntax)),        ifthen(not(what_worlds(mind)),create_world(mind)),        ifthen(not(what_worlds(inference)),create_world(inference)),        reconsult(anmorfol),reconsult(genmorfo),        reconsult(angenfon),reconsult(angendec),	reconsult(menu),        code_world(_,syntax),        reconsult(ansyntax),reconsult(gensyntx),        reconsult(anlrval),reconsult(genlrval),        reconsult(ancdval),reconsult(gencdval),	reconsult(synonlex),	code_world(_,inference),        reconsult(inferenc),        code_world(_,main),        introduce.restart :- what_windows(W),ifthen((W\=main,W\=debug),delete_window(W)),         exit_popup,fail.restart :- introduce.introduce :-     ifthen(not(what_windows(sapfo)),                  define_window(sapfo,'SAPFO',(0,0),(24,79),(5,4))),    hide_window(_,sapfo),cls,    tmove(3,21),write('Sense Apprehending Frame Operator'),    tmove(20,28),write('(C) 1990 Emil Páleš'),    repeat,hide_window(_,sapfo),create_popup('choose',(7,26),(17,50),(6,4)),    nl,write(' Answer Questions'),nl,write(' Paraphrase Sentence'),    nl,write(' Analyse Synsemantics'),nl,write(' Analyse Morphology'),    nl,write(' Generate Forms'),nl,write(' Expand Lexicon'),    nl,write(' Exit Sapfo'),    needle_paint(12,[1,8,2,1,3,9,4,9,5,1,6,8,7,1]),[!choose(X)!],X=e.choose(X) :- keyb(Y,_),    name(X,[Y]),exit_popup,code_world(_,main),    case([X==l->true,          X==m->anmorf,	  X==g->genform,          X==s->ansyn,          X==p->ansyn,          X==q->ansquest,          X==e->partake|fail]),!.ansquest :- relabel('SAPFO - Question Answering',4,4),   nl,write(' Hello.'),nl,   repeat,nl,write(' '),input(Veta),   ifthenelse(Veta=='',(write(' Bye.'),nl),    (code_world(_,syntax),abolish(an/6),code_world(_,main),     data_world(_,lexicon),     break(Veta,V1),     last(V1,V2,[X]),     case([(X=='.';X=='...') -> Mod=decl,            X=='?' -> Mod=quest,            X=='!' -> Mod=imper]),     sequence(V2,no),     code_world(_,syntax),data_world(_,valency),     veta(hl,V1,[X],LL,_),     code_world(_,inference),data_world(_,mind),      eraseall(mirabel),recorda(mirabel,mirabel(LL),_),      questans(LL,Mod),     code_world(_,main),data_world(_,main),     fail    )).ansyn :- relabel('SAPFO - Syntax & Semantics',7,3),   define_window(vet,'Veta',(21,0),(23,78),(7,3)),   define_window(cas,'Time',(5,50),(8,71),(7,3)),   define_window(cas2,'Èas',(21,65),(23,77),(7,3)),   define_window(synsen,'Synsemantic Dependency',(7,10),(19,55),(7,3)),   define_window(amb,'Ambiguities',(15,62),(20,76),(4,3)),   define_window(fraz,'',(10,7),(12,13),(4,3)),   repeat,current_window(_,vet),tmove(0,1),input(Veta),   write(' '),write(Veta),ctr_set(7,1),ansyn1(Veta).ansyn1(Veta) :-     ifthenelse(Veta='',      (!,delete_window(vet),delete_window(cas),delete_window(fraz),         delete_window(synsen),delete_window(amb),delete_window(cas2)),      (time(T1),       code_world(_,syntax),       abolish(an/6),abolish(radix/4),addfar,       code_world(_,main),       data_world(_,lexicon),       break(Veta,V1),       current_window(_,sapfo),cls,       last(V1,V2,[X]),(X='.';X='!';X='?';X='...'),       sequence(V2,yes),       current_window(_,vet),       time(T2),       !,       code_world(_,syntax),data_world(_,valency),       farsynfield,       current_window(_,synsen),cls,       eraseall(anabel),recorda(anabel,anabel(V1),_),       (veta(hl,V1,[X],NET,_);fraza(V1,NET,Pa,Ci)),       show_tree(NET),       eraseall(isabel),recorda(isabel,isabel(NET),_),       code_world(_,main),data_world(_,main),       time(T3),clock_sec(T1,T2,T4),clock_sec(T2,T3,T5),       current_window(_,cas),cls,       write('morphology : '),write(T4),nl,       write('syntax     : '),write(T5),       current_window(_,amb),cls,tmove(2,6),ctr_inc(7,Y),write(Y),       ifthen(nonvar(Pa),(current_window(_,fraz),cls,write(' '),write(Pa))),       flush,keyb(Kb1,_),name(Kb,[Kb1]),       case([Kb1=27 -> !,             (Kb=' ';Kb=p;Kb=f;Kb=l) ->                 (!,relabel('SAPFO - Sentence Paraphrasing',5,5),cls,                 ifthen(Kb==p,dialog_run(menu,msg)),                 time(T6),p(Kb,V2),time(T7),clock_min(T6,T7,T8),                 current_window(_,vet),current_window(_,cas2),                 nl,write(' '),write(T8),keyb(_,_))            |current_window(_,synsen)]),       fail)).ansyn1(_) :- current_window(_,fraz),fail.       anmorf :- cls,relabel('SAPFO - Morfológia',3,2),    define_window(tvar,'Tvar',(1,1),(3,29),(3,2)),    define_window(cas,'Èas',(1,30),(3,39),(3,2)),    define_window(alt,'Alternácie',(4,1),(11,39),(3,2)),    define_window(hyp,'Hypotézy',(1,40),(11,78),(3,2)),    define_window(vys,'Výsledky',(12,1),(23,78),(3,2)),    repeat,current_window(_,tvar),tmove(0,1),input(Tv),write(' '),write(Tv),    current_window(_,vys),cls,current_window(_,hyp),cls,    current_window(_,alt),cls,current_window(_,cas),cls,    ifthenelse(Tv=='',      (!,data_world(_,main),delete_window(alt),delete_window(hyp),         delete_window(cas),delete_window(vys),delete_window(tvar)),      (time(T1),       data_world(_,lexicon),       findmf(an(GCat,SCat,Ne,Ko,[Tv|S],S)),       data_world(_,main),       time(T2),       clock_sec(T1,T2,T3),current_window(W,cas),nl,write(T3),fail)).        genform :- relabel('SAPFO - Form Generation',14,9),   define_window(kor,'Root',(1,40),(5,60),(14,9)),   define_window(form,'Word-Forms',(1,1),(23,39),(14,9)),   define_window(gcat,'Grammatic categories',(7,40),(11,78),(14,9)),   define_window(scat,'Semantic categories',(15,40),(19,78),(14,9)), create(_,'noetic.lst'),open(H,'noetic.lst',w),   repeat,current_window(_,kor),tmove(1,1),[!input(Kor)!],cls,tmove(1,1),   write(Kor), nl(H),nl(H),   ifthenelse(Kor='',     (!,delete_window(kor),delete_window(form), close(H),        delete_window(gcat),delete_window(scat)),     (data_world(_,lexicon),      (GC=subst(_,_,_,_);(GC=adjekt(_,_,_,_,St),(St=poz;St=kom;St=sup));       GC=adverb(_);       GC=infin;GC=indikat(_,_,_);       GC=imper(_,_);       GC=gerund(_,_);(GC=tpar(_,_,_,_,St),(St=poz;St=kom;St=sup));       GC=cpar(_,_,_,_,_);GC=tranz;       GC=lpar(_,_)),      current_window(_,form),      ifthenelse((GC=indikat(_,_,_);GC=imper(_,_);GC=lpar(_,_)),         (Neg=ano;Neg=nie),Neg=ano),      gent(GC,SC,Neg,(Kor,Nu),[X|_],_),            ifthen((GC=subst(_,_,nom,sg);GC=adjekt(muz,ziv,nom,sg,_);             GC=adverb(_);GC=infin;GC=indikat(1,sg,_);GC=imper(2,sg);             GC=gerund(nom,sg);GC=tpar(muz,ziv,nom,sg,_);             GC=cpar(muz,ziv,nom,sg,_);GC=tranz;GC=lpar(muz,sg)),(nl,nl(H))),      current_window(_,form),nl,write(X),      current_window(_,gcat),cls,tmove(1,1),write(GC),      current_window(_,scat),cls,tmove(1,1),write(SC), write(H,X),write(H,'            '),write(H,GC), ifthen((GC=subst(_,_,nom,sg);GC=infin;GC=adjekt(muz,ziv,nom,sg,poz)),   (write(H,'       '),write(H,SC))),nl(H),	        fail)).break($$,[]) :- !.break(Str,Lst) :-    first(Str,Loc),!,   markers(Mrk),member([X,Y],Mrk),string_length(X,L2),   atom_string(X,X1),substring(Str,Loc,L2,X1),!,   string_length(Str,L1),   L3 is (L1-Loc)-L2,N is Loc+L2,   substring(Str,0,Loc,Str1),substring(Str,N,L3,Str2),   atom_string(Wrd,Str1),break(Str2,Lst2),   ifthenelse(X=' ',Lst=[Wrd|Lst2],Lst=[Wrd,Y|Lst2]).markers1([' ',',',';',':',')','\','.',' ','"','?','!','...','(','/','=','&']).markers([[', ',','],[',',','],['; ',';'],[';',';'],[': ',':'],[':',':'],   [' - ','-'],['-','-'],[' (','('],[') ',')'],['. ','.'],['.','.'],   [' "','"'],['" ','"'],[' ! ','!'],[' !','!'],['!','!'],[' ?','?'],   ['?','?'],[' = ','='],['=','='],['...','...'],[' /','/'],['\ ','\'],   [' & ','&'],['&','&'],[' ',' ']]).sequence([],_) :- !.sequence(L,Wrt) :- L=[_|L1],findsx(L,Wrt),!,sequence(L1,Wrt).partake :- !.partake :- cls,create_popup('',(18,35),(22,77),(6,6)),    wish,keyb(_,_),exit_popup,cls.wish :- date(D),date_day(D,X),day(X,Y),time(time(H,_,_,_)),    ifthenelse(H<12,Z=' morning !',Z=' afternoon !'),         nl,write(' I wish you a nice '),write(Y),write(Z).    day(1,monday).day(2,tuesday).day(3,wednesday).day(4,thursday).    day(5,friday).day(6,saturday).day(7,sunday).needle_paint(_,[]) :- tmove(0,0),!.needle_paint(Col,[X,Y|L]) :- tmove(X,Y),wa(1,Col),needle_paint(Col,L).paintscroll(Win,Lst) :- current_window(W,Win),window_info(Win,_,(A,B),(C,D),_),   tscroll(-1,(A,B),(C,D)),tmove(1,1),concat(Lst,Str),string_length(Str,L),   write(Str),current_window(Win,W).paint(Win,Lst) :- ifthen(what_windows(Win),   (current_window(W,Win),    tim,concat(Lst,Str),write(Str),nl,current_window(Win,W))).tim :- time(time(_,_,Se,St)),write(Se),write(':'),write(St),write('   ').message(M) :- resize_window(-3,0),   create_popup('',(22,0),(24,79),(3,4)),write(M).exit :- exit_popup,resize_window(3,0).showb :- [!ctr_set(1,0)!],data_world(_,lexicon),   (Tr=korene;Tr=subkmene;Tr=infkmene;Tr=adjkmene;Tr=advkmene;Tr=inekmene),    nl,find((K,L),retrieveb(Tr,K,L)),fail.showb :- ctr_is(1,X),nl,write(' Lexical dictionary contains '),write(X),   write(' roots and stems.'),nl,   data_world(_,main),!.showh :- [!ctr_set(1,0)!],data_world(_,valency),nl,   retrieveh(procesy,Nb,Pcs),nl,write((Nb,Pcs)),nl,   find(G,retrieveh(intencia,Nb,G)),   fail.showh :- ctr_is(1,X),nl,write('Semantic dictionary contains '),write(X),   write(' valency lines.'),nl,   data_world(_,main),!.find(G,T) :- call(T),write(' '),write(G),[!ctr_inc(1,_)!],nl,fail.find(_,_) :- !.findsx([T|L],Wrt) :- an(Gc,Sc,Ne,Ko,[T|L],L),           G=an(Gc,Sc,Ne,Ko,[T|S],S),	   ifthen(Wrt=yes,(	    string_term(G1,G),concat(G1,$................................s$,G2),            substring(G2,3,68,G3),            write(G3),nl)),	   code_world(main,syntax),           assert((G)),farfield(Ko),           code_world(syntax,main),fail.findsx(_,_) :- !.findmf(G) :- call(G),           string_term(G1,G),concat(G1,$................................s$,G2),           substring(G2,3,68,G3),           paint(vys,[G3]),           fail.findmf(_) :- !.input(X) :- read_line(1,S),atom_string(X,S),!.inout(X) :- ifthenelse(var(X),input(X),(write(X),nl)).relabel(L,C1,C2) :- delete_window(sapfo),    define_window(sapfo,L,(0,0),(24,79),(C1,C2)),    hide_window(_,sapfo).last([X],[],[X]) :- !.last([X|L],[X|L2],Y) :- last(L,L2,Y).first(Str,0) :-	    substring(Str,0,1,X1),atom_string(X,X1),markers1(Z),member(X,Z),!.first(Str,Loc) :- string_length(Str,L),L1 is L-1,substring(Str,1,L1,Str1),    first(Str1,Loc1),Loc is Loc1+1.  clock_sec(C1,C2,C) :- C1=time(_,M1,S1,T1),C2=time(_,M2,S2,T2),    C is (((6000*M2+100*S2+T2) - (6000*M1+100*S1+T1))/100).clock_min(C1,C2,C3) :- C1=time(_,M1,S1,_),C2=time(_,M2,S2,_),    C is (60*M2+S2-60*M1-S1)/60,C3 is round(C,2).